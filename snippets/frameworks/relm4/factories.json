{
	"Relm4 Factory Component": {
        "prefix": "relm-factory",
        "description": "Relm4 Factory Component",
        "body": [
            "use relm4::{",
            "    factory::FactoryView,",
            "    gtk,",
            "    prelude::{DynamicIndex, FactoryComponent},",
            "    FactorySender,",
            "};",
            "",
            "pub struct FactoryModel {}",
            "",
            "#[derive(Debug)]",
            "pub enum FactoryInput {}",
            "",
            "#[derive(Debug)]",
            "pub enum FactoryOutput {}",
            "",
            "pub struct FactoryInit {}",
            "",
            "#[relm4::factory(pub)]",
            "impl FactoryComponent for FactoryModel {",
            "    type ParentWidget = gtk::Box;",
            "    type ParentInput = ();",
            "    type Input = FactoryInput;",
            "    type Output = FactoryOutput;",
            "    type Init = FactoryInit;",
            "    type CommandOutput = ();",
            "",
            "    view! {",
            "        #[root]",
            "        gtk::Box {",
            "",
            "        }",
            "    }",
            "",
            "    fn init_model(",
            "        init: Self::Init,",
            "        index: &DynamicIndex,",
            "        sender: FactorySender<Self>,",
            "    ) -> Self {",
            "        Self {}",
            "    }",
            "",
            "    fn init_widgets(",
            "        &mut self,",
            "        _index: &DynamicIndex,",
            "        root: &Self::Root,",
            "        _returned_widget: &<Self::ParentWidget as FactoryView>::ReturnedWidget,",
            "        sender: FactorySender<Self>,",
            "    ) -> Self::Widgets {",
            "        let widgets = view_output!();",
            "        widgets",
            "    }",
            "",
            "    fn update(&mut self, message: Self::Input, sender: FactorySender<Self>) {",
            "        match message {}",
            "    }",
            "",
            "    fn output_to_parent_input(output: Self::Output) -> Option<Self::ParentInput> {",
            "        let output = match output {};",
            "        Some(output)",
            "    }",
            "}"
        ]
    },
    "Relm4 Async Factory Component": {
        "prefix": "relm-async-factory",
        "description": "Relm4 Async Factory Component",
        "body": [
            "use relm4::{",
            "    factory::{FactoryView, AsyncFactoryComponent},",
            "    gtk,",
            "    prelude::{DynamicIndex}, ",
            "    AsyncFactorySender, loading_widgets::LoadingWidgets,",
            "};",
            "",
            "pub struct FactoryModel {}",
            "",
            "#[derive(Debug)]",
            "pub enum FactoryInput {}",
            "",
            "#[derive(Debug)]",
            "pub enum FactoryOutput {}",
            "",
            "pub struct FactoryInit {}",
            "",
            "#[relm4::factory(pub async)]",
            "impl AsyncFactoryComponent for FactoryModel {",
            "    type ParentWidget = gtk::Box;",
            "    type ParentInput = ();",
            "    type Input = FactoryInput;",
            "    type Output = FactoryOutput;",
            "    type Init = FactoryInit;",
            "    type CommandOutput = ();",
            "",
            "    view! {",
            "        #[root]",
            "        gtk::Box {",
            "",
            "        }",
            "    }",
            "",
            "    fn init_loading_widgets(",
            "        root: &mut Self::Root,",
            "    ) -> Option<LoadingWidgets> {",
            "        relm4::view! {",
            "            #[local_ref]",
            "            root {",
            "                #[name(spinner)]",
            "                gtk::Spinner {",
            "                    start: ()",
            "                }",
            "            }",
            "        }",
            "        Some(LoadingWidgets::new(root, spinner))",
            "    }",
            "",
            "    async fn init_model(",
            "        init: Self::Init,",
            "        _index: &DynamicIndex,",
            "        _sender: AsyncFactorySender<Self>,",
            "    ) -> Self {",
            "        Self {",
            "        ",
            "        }",
            "    }",
            "",
            "    fn init_widgets(",
            "        &mut self,",
            "        _index: &DynamicIndex,",
            "        root: &Self::Root,",
            "        _returned_widget: &<Self::ParentWidget as FactoryView>::ReturnedWidget,",
            "        sender: AsyncFactorySender<Self>,",
            "    ) -> Self::Widgets {",
            "        let widgets = view_output!();",
            "        widgets",
            "    }",
            "",
            "    async fn update(",
            "        &mut self,",
            "        message: Self::Input,",
            "        sender: AsyncFactorySender<Self>,",
            "    ) {",
            "        match message {}",
            "    }",
            "",
            "    fn output_to_parent_input(output: Self::Output) -> Option<Self::ParentInput> {",
            "        let output = match output {};",
            "        Some(output)",
            "    }",
            "}"
        ]
    }
}