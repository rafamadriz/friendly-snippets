{
  "edge: Block": {
    "prefix": "block",
    "body": ["{{ $1 }}"],
    "description": "Edge: block tag"
  },
  "edge: Comment": {
    "prefix": "comment",
    "body": ["{{-- $1 --}}"],
    "description": "Edge: comment tag"
  },
  "edge: Conditional": {
    "prefix": "@if",
    "body": ["@if($1)", "  $2", "@end"],
    "description": "Edge: if tag accepts the expression to evaluate as the only argument."
  },
  "edge: Conditional with an else statement": {
    "prefix": "@ifelse",
    "body": ["@if($1)", "  $2", "@else", "  $3", "@end"],
    "description": "Edge: if else tag accepts the expression to evaluate as the only argument."
  },
  "edge: Conditional with else and elseif statement": {
    "prefix": "@ifelseif",
    "body": ["@if($1)", "  $2", "@elseif($3)", "  $4", "@else", "  $5", "@end"],
    "description": "Edge: if else tag"
  },
  "edge: Inverse conditional": {
    "prefix": "@unless",
    "body": ["@unless($1)", "  $2", "@else", "  $3", "@end"],
    "description": "Edge: unless tag inverse if statement."
  },
  "edge: for each loop with index": {
    "prefix": "@each-index",
    "body": ["@each(${1:key}, ${2:value} in ${3:object})", "  $3", "@end"],
    "description": "Edge: each index tag with key value"
  },
  "edge: For Each Loop": {
    "prefix": "@each-in",
    "body": ["@each(${1:item} in ${2:array})", "  $3", "@end"],
    "description": "Edge: each in tag let you loop over an array or an object of values."
  },
  "edge: Component with body": {
    "prefix": "@component",
    "body": ["@component('${1:name}')", "  $2", "@end"],
    "description": "Edge: component tag allows you to use an Edge template as a component."
  },
  "edge: Inline component": {
    "prefix": "@!component",
    "body": ["@!component('${1:name}')"],
    "description": "Edge: inline component tag allows you to use an Edge template as a component."
  },
  "edge: Component slot": {
    "prefix": "@slot",
    "body": ["@slot('${1:name}')", "  $2", "@end"],
    "description": "Edge: slot tag allows you define the markup for the named slots. It accepts the slot name as the first argument and can also receive additional arguments from the component template."
  },
  "edge: Inject": {
    "prefix": "@inject",
    "body": ["@inject('${1:values}')"],
    "description": "Edge: inject tag allows the component template to inject data into the component tree. The tag accepts an object as the only argument."
  },
  "edge: Include partial": {
    "prefix": "@include",
    "body": ["@include('${1:name}')"],
    "description": "Edge: include tag allows you include a partial to a given template"
  },
  "edge: Include conditional partial": {
    "prefix": "@includeIf",
    "body": ["@includeIf(${1:condition}, '${2:name}')"],
    "description": "Edge: includeif tag to include a partial conditionally. The first argument is the condition to evaluate before including the partial."
  },
  "edge: Layout": {
    "prefix": "@layout",
    "body": ["@layout('${1:name}')"],
    "description": "Edge: layout tag allows you define the layout template for the current template."
  },
  "edge: Section block": {
    "prefix": "@section",
    "body": ["@section('${1:name}')", "  $2", "@end"],
    "description": "Edge: section tag use the layout must define all the markup inside the sections exported by the layout"
  },
  "edge: Inline section": {
    "prefix": "@!section",
    "body": ["@!section('${1:name}')"],
    "description": "Edge: section inline tag use the layout must define all the markup inside the sections exported by the layout"
  },
  "edge: Super": {
    "prefix": "@super",
    "body": ["@super"],
    "description": "Edge: super tag allows you to inherit the existing content of the section. It is an inline tag and does not accept any arguments."
  },
  "edge: Bouncer can guard": {
    "prefix": "@can",
    "body": ["@can('${1:ability}', ${2:args})", "  $3", "@end"],
    "description": "Edge: can tag from @adonisjs/bouncer allows you write conditionals around the bouncer permissions."
  },
  "edge: Bouncer cannot guard": {
    "prefix": "@cannot",
    "body": ["@cannot('${1:ability}', ${2:args})", "  $3", "@end"],
    "description": "Edge: cannot tag from @adonisjs/bouncer allows you write conditionals around the bouncer permissions."
  },
  "edge: Debugger": {
    "prefix": "@debugger",
    "body": ["@debugger"],
    "description": "Edge: debugger tag is an inline tag. It drops the debugger keyword to the template output. You can use the chrome devtools to debug the compiled templates."
  },
  "edge: Define local variable": {
    "prefix": "@set",
    "body": ["@set('$1', $2)"],
    "description": "Edge: set tag is an inline tag. That allows you to define local variables within the template scope or mutate the value of an existing variable."
  },
  "edge: Entry point scripts": {
    "prefix": "@entryPointScripts",
    "body": ["@entryPointScripts('$1')"],
    "description": "Edge: entryPointScripts tag is an inline tag. Renders the required script for a given entrypoint."
  },
  "edge: Entry point styles": {
    "prefix": "@entryPointStyles",
    "body": ["@entryPointStyles('$1')"],
    "description": "Edge: entryPointStyles tag is an inline tag. Renders the required link for a given entrypoint."
  },
  "edge: app": {
    "prefix": "app",
    "body": "app",
    "description": "Reference to application instance"
  },
  "edge: asset": {
    "prefix": "asset",
    "body": "asset('${1:filePath}')",
    "description": "Get path to a frontend asset"
  },
  "edge: auth.isLoggedIn": {
    "prefix": "auth.isLoggedIn",
    "body": "auth.isLoggedIn",
    "description": "Find if user is loggedin"
  },
  "edge: auth.user": {
    "prefix": "auth.user",
    "body": "auth.user",
    "description": "Get auth user"
  },
  "edge: camelCase": {
    "prefix": "camelCase",
    "body": "camelCase(${1:'${2:value}'})",
    "description": "Convert a string to camelcase"
  },
  "edge: capitalCase": {
    "prefix": "capitalCase",
    "body": "capitalCase(${1:'${2:value}'})",
    "description": "Convert a string to capitalCase"
  },
  "edge: config": {
    "prefix": "config",
    "body": "config('${1:key}')",
    "description": "Get config value"
  },
  "edge: cspNonce": {
    "prefix": "cspNonce",
    "body": "cspNonce",
    "description": "Use csp nonce on script tag"
  },
  "edge: csrfField": {
    "prefix": "csrfField()",
    "body": "csrfField()",
    "description": "Add csrfField input field to form"
  },
  "edge: dashCase": {
    "prefix": "dashCase",
    "body": "dashCase(${1:'${2:value}'})",
    "description": "Convert a string to dashCase"
  },
  "edge: dotCase": {
    "prefix": "dotCase",
    "body": "dotCase(${1:'${2:value}'})",
    "description": "Convert a string to dotCase"
  },
  "edge: driveSignedUrl": {
    "prefix": "driveSignedUrl",
    "body": "await driveSignedUrl('${1:location}'${2:, 'optionalDiskName'})",
    "description": "Get signed URL to a file using AdonisJS drive"
  },
  "edge: driveUrl": {
    "prefix": "driveUrl",
    "body": "await driveUrl('${1:location}'${2:, 'optionalDiskName'})",
    "description": "Get URL to a file using AdonisJS drive"
  },
  "edge: e": {
    "prefix": "e",
    "body": "e(${1:'${2:markup}'})",
    "description": "Escape HTML markup"
  },
  "edge: env": {
    "prefix": "env",
    "body": "env('${1:key}')",
    "description": "Get environment variable value"
  },
  "edge: excerpt": {
    "prefix": "excerpt",
    "body": "excerpt(${1:value}, ${2:100})",
    "description": "Generate plain text excerpt and truncate after given characters count"
  },
  "edge: flashMessages.all": {
    "prefix": "inspect(flashMessages.all())",
    "body": "inspect(flashMessages.all())",
    "description": "Inspect all messages"
  },
  "edge: flashMessages.get": {
    "prefix": "flashMessages.get",
    "body": "flashMessages.get('$1', $2)",
    "description": "Get flash message value"
  },
  "edge: flashMessages.has": {
    "prefix": "flashMessages.has",
    "body": "flashMessages.has('$1')",
    "description": "Check if a flash message exists"
  },
  "edge: inspect": {
    "body": "inspect($1)",
    "prefix": "inspect",
    "description": "inspect global helper to inspect a value or the entire state of the template. The helper method can pretty print the following JavaScript primitives."
  },
  "edge: nl2br": {
    "prefix": "nl2br",
    "body": "nl2br(e(${1:'${2:body}'}))",
    "description": "Convert new line to br tags"
  },
  "edge: noCase": {
    "prefix": "noCase",
    "body": "noCase(${1:'${2:value}'})",
    "description": "Remove all sort of casing from a string"
  },
  "edge: ordinalize": {
    "prefix": "ordinalize",
    "body": "ordinalize(${1:value})",
    "description": "Ordinalize a string or a number value"
  },
  "edge: pascalCase": {
    "prefix": "pascalCase",
    "body": "pascalCase(${1:'${2:value}'})",
    "description": "Convert a string to pascalCase"
  },
  "edge: pluralize": {
    "prefix": "pluralize",
    "body": "pluralize(${1:value}${2:, optionalCount})",
    "description": "Pluralize a word"
  },
  "edge: prettyBytes": {
    "prefix": "prettyBytes",
    "body": "prettyBytes(${1:1024})",
    "description": "Pretty print bytes to human readable string"
  },
  "edge: prettyMs": {
    "prefix": "prettyMs",
    "body": "prettyMs(${1:60000})",
    "description": "Pretty print milliseconds to human readable string"
  },
  "edge: props.serialize": {
    "prefix": "psl",
    "body": "\\$props.serialize(${1:optionalObjectToMerge})",
    "description": "Serialize component props to HTML attributes"
  },
  "edge: props.serializeExcept": {
    "prefix": "psle",
    "body": "\\$props.serializeExcept([$1], ${2:optionalObjectToMerge})",
    "description": "Serialize selected component props to HTML attributes"
  },
  "edge: props.serializeOnly": {
    "prefix": "pslo",
    "body": "\\$props.serializeOnly([$1], ${2:optionalObjectToMerge})",
    "description": "Serialize selected component props to HTML attributes"
  },
  "edge: route": {
    "prefix": "route",
    "body": "route('${1:routeName}', ${2:[args]})",
    "description": "Make URL for a route"
  },
  "edge: safe": {
    "prefix": "safe",
    "body": "safe(${1:'${2: markup}'})",
    "description": "Render HTML markup without escaping it"
  },
  "edge: sentenceCase": {
    "prefix": "sentenceCase",
    "body": "sentenceCase(${1:'${2:value}'})",
    "description": "Convert a string to sentenceCase"
  },
  "edge: signedRoute": {
    "prefix": "signedRoute",
    "body": "signedRoute('${1:routeName}', ${2:[args]})",
    "description": "Make signed URL for a route"
  },
  "edge: snakeCase": {
    "prefix": "snakeCase",
    "body": "snakeCase(${1:'${2:value}'})",
    "description": "Convert a string to snakeCase"
  },
  "edge: titleCase": {
    "prefix": "titleCase",
    "body": "titleCase(${1:'${2:value}'})",
    "description": "Convert a string to titleCase"
  },
  "edge: toBytes": {
    "prefix": "toBytes",
    "body": "toBytes(${1:'1MB'})",
    "description": "Convert human readable expression to bytes"
  },
  "edge: toMs": {
    "prefix": "toMs",
    "body": "toMs(${1:'1min'})",
    "description": "Convert human readable expression to milliseconds"
  },
  "edge: toSentence": {
    "prefix": "toSentence",
    "body": "toSentence([${1:'car'}, ${2: 'truck'}, ${3: 'van'}], { separator: ', ', lastSeparator: ', or ' })",
    "description": "Convert an array to a sentence"
  },
  "edge: truncate": {
    "prefix": "truncate",
    "body": "truncate(${1:value}, ${2:100})",
    "description": "Truncate string after given characters count"
  }
}
