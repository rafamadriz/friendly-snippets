{
    "ifelse": {
        "prefix": "if",
        "body": [
            "if $1 then",
            "  $2",
            "else$0"
        ],
        "description": "if-else block"
    },
    "letin": {
        "prefix": "let",
        "body": [
            "let",
            "  $1",
            "in $0"
        ],
        "description": "let-in block"
    },
    "hash": {
        "prefix": "hash",
        "body": "\"${1:sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=}\";",
        "description": "Empty hash"
    },
    "fetchFrom": {
        "prefix": "fetchFrom",
        "body": [
            "fetchFrom${1|GitHub,GitLab,Gitea,Gitiles,BitBucket,Savannah,RepoOrCz,SourceHut|} {",
            "  owner = \"$2\";",
            "  repo = \"$3\";",
            "  rev = \"${4:v\\${version\\}}\";",
            "  hash = \"${5:sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=}\";",
            "};"
        ],
        "description": "fetchFromGitHub, or any other common fetcher from Nixpkgs"
    },
    "fetchurl": {
        "prefix": "fetchurl",
        "body": [
            "fetchurl {",
            "  url = \"$1\";",
            "  hash = \"${2:sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=}\";",
            "};"
        ],
        "description": "fetchurl with default empty hash"
    },
    "package-arguments": {
        "prefix": "pkg",
        "body": [
            "{ lib",
            ", ${1:stdenv}",
            ", $2",
            "}:",
            "",
            "$0"
        ],
        "description": "Package arguments, starting with { lib"
    },
    "stdenv.mkDerivation": {
        "prefix": "mkd",
        "body": [
            "stdenv.mkDerivation (finalAttrs: {",
            "  pname = \"$1\";",
            "  version = \"$2\";",
            "",
            "  src = $3",
            "",
            "  nativeBuildInputs = [",
            "    $4",
            "  ];",
            "  buildInputs = [",
            "    $0",
            "  ];",
            "",
            "  meta = {",
            "    description = \"$5\";",
            "    homepage = \"$6\";",
            "    license = lib.licenses.$7;",
            "    maintainers = with lib.maintainers; [ $8 ];",
            "  };",
            "})"
        ],
        "description": "Nixpkgs' stdenv.mkDerivation template"
    },
    "pkgs.mkShell": {
        "prefix": "mks",
        "body": [
            "pkgs.mkShell {",
            "  shellHook = ''",
            "    $1",
            "  '';",
            "",
            "  env = {",
            "    $2",
            "  };",
            "",
            "  packages = [",
            "    $3",
            "  ];",
            "}"
        ],
        "description": "mkShell template"
    },
    "flake-parts": {
        "prefix": "flakeparts",
        "body": [
            "{",
            "  description = \"${1:A flake}\";",
            "",
            "  inputs = {",
            "    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";",
            "    flake-parts.url = \"github:hercules-ci/flake-parts\";",
            "  };",
            "",
            "  outputs =",
            "    inputs@{ flake-parts, ... }:",
            "    flake-parts.lib.mkFlake { inherit inputs; } {",
            "      imports = [",
            "        $2",
            "      ];",
            "      systems = [",
            "        \"x86_64-linux\"",
            "        \"aarch64-linux\"",
            "        \"aarch64-darwin\"",
            "        \"x86_64-darwin\"",
            "      ];",
            "      perSystem =",
            "        {",
            "          config,",
            "          pkgs,",
            "          system,",
            "          ...",
            "        }:",
            "        {",
            "          $3",
            "        };",
            "      flake = {",
            "        $4",
            "      };",
            "    };",
            "}"
        ],
        "description": "simple flake template with flake-parts"
    },
    "flake-utils": {
        "prefix": "flakeutils",
        "body": [
            "{",
            "  description = \"${1:A flake}\";",
            "",
            "  inputs = {",
            "    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";",
            "    flake-utils.url = \"github:numtide/flake-utils\";",
            "    $2",
            "  };",
            "",
            "  outputs = inputs @ { self, nixpkgs, flake-utils, ... }: ",
            "    flake-utils.lib.eachDefaultSystem (system: {",
            "      $3",
            "    });",
            "}"
        ],
        "description": "simple flake template with flake-utils"
    },
    "meta": {
        "prefix": "meta",
        "body": [
            "meta = {",
            "  description = \"$1\";",
            "  homepage = \"$2\";",
            "  license = lib.licenses.$3;",
            "  maintainers = with lib.maintainers; [ $0 ];",
            "};"
        ],
        "description": "Nixpkgs' minimal meta attribute set"
    },
    "with": {
        "prefix": "with",
        "body": ["with $1; $0;"],
        "description": "with expression"
    },
    "inherit": {
        "prefix": "inherit",
        "body": ["inherit $1;"],
        "description": "inherit expression"
    }
}
